#!/usr/bin/env python

import sys
import urllib2
import json
import time
from threading import Thread, Event
from os.path import expanduser, isfile
from os import system

base_url = 'http://download.finance.yahoo.com/d/quotes.csv?s={0}&f=l1p2'
config = dict(stock_symbols = [],
              refresh_period = 2,
              max_number_of_retries = 3,
              separator = ' | ')

def main():
    parse_config_file()
    parse_command_line_args()
    data_fetcher = DataFetcher(config['stock_symbols'])
    try:
        while True:
            data_fetcher.run()
            time.sleep(config['refresh_period'])
    finally:
        sys.exit(0)

def parse_config_file():
    config_file_location = expanduser("~") + '/.stocks.conf'
    if not isfile(config_file_location):
        return
    config_file = open(expanduser("~") + '/.stocks.conf')
    user_config = json.load(config_file)
    config_file.close()
    for entry in user_config:
        if entry in user_config: config[entry] = user_config[entry]

def parse_command_line_args():
    if len(sys.argv) < 2:
        return
    config['stock_symbols'] += sys.argv[1:]

def verify_stock_symbols():
    pass

def init_scr():
    std_screen = curses.initscr()
    curses.start_color()
    curses.use_default_colors()
    curses.noecho()
    curses.cbreak()
    curses.curs_set(0)
    std_screen.keypad(1)
    curses.init_pair(1, curses.COLOR_GREEN, -1)
    curses.init_pair(2, curses.COLOR_RED, -1)
    return std_screen

def close_screen(std_screen):
    curses.nocbreak()
    std_screen.keypad(0)
    curses.echo()
    curses.endwin()

class DataFetcher:

    def __init__(self, stocks):
        self._stop = Event()
        self._stocks = stocks

    def run(self):
        data = self.fetch_data()
        if data is not None:
            parsed_data = self.parse_data(data)
            self.display_data(parsed_data)
            time.sleep(config['refresh_period'])

    def fetch_data(self):
        stocks_string = ','.join(self._stocks)
        try:
            return urllib2.urlopen(base_url.format(stocks_string)).read().strip()
        except:
            return None

    def parse_data(self, data):
        parsed_data = []
        split_data = data.split('\n')
        for stock, price_percentage in zip(self._stocks, split_data):
            split_price_percentage = price_percentage.split(',')
            price = split_price_percentage[0]
            percentage = split_price_percentage[1].replace('"', '').strip()
            parsed_data.append((stock, price, percentage))
        return parsed_data

    def display_data(self, stock_data):
        texts = []
        for stock in stock_data:
            color = term_colors.GREEN if '+' in stock[2] else \
                term_colors.RED if '-' in stock[2] else term_colors.DEFAULT
            texts.append('{0} {1}{2} ({3}){4}'.format(stock[0].upper(),
                                         color,
                                         stock[1],
                                         stock[2],
                                         term_colors.DEFAULT))
        system('clear && printf "\e[3J"')
        print config['separator'].join(texts)

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()

class term_colors:

    GREEN = '\033[92m'
    RED = '\033[91m'
    DEFAULT = '\033[0m'

if __name__ == '__main__':
    main()
