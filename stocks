#!/usr/bin/env python

import sys
import urllib2
import curses
import json
import time
from threading import Thread, Event
from os.path import expanduser, isfile

base_url = 'http://download.finance.yahoo.com/d/quotes.csv?s={0}&f=l1p2'
config = dict(stock_symbols = [],
              refresh_period = 2,
              max_number_of_retries = 3)

def main():
    parse_config_file()
    parse_command_line_args()
    if len(config['stock_symbols']) == 0:
        print('No stock symbols specified ')
        return
    std_screen = init_scr()
    thread = DataFetcher(config['stock_symbols'], std_screen)
    thread.start()
    while std_screen.getch() != 113:
        std_screen.refresh()
    thread.stop()
    close_screen(std_screen)

def parse_config_file():
    config_file_location = expanduser("~") + '/.stocks.conf'
    if not isfile(config_file_location):
        return
    config_file = open(expanduser("~") + '/.stocks.conf')
    user_config = json.load(config_file)
    config_file.close()
    for entry in user_config:
        if entry in user_config: config[entry] = user_config[entry]

def parse_command_line_args():
    if len(sys.argv) < 2:
        return
    config['stock_symbols'] += sys.argv[1:]

def init_scr():
    std_screen = curses.initscr()
    curses.start_color()
    curses.noecho()
    curses.cbreak()
    curses.curs_set(0)
    std_screen.keypad(1)
    curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    return std_screen

def close_screen(std_screen):
    curses.nocbreak()
    std_screen.keypad(0)
    curses.echo()
    curses.endwin()

class DataFetcher(Thread):

    def __init__(self, stocks, std_screen):
        super(DataFetcher, self).__init__()
        self._stop = Event()
        self._stocks = stocks
        self._std_screen = std_screen

    def run(self):
        retry_count = 0
        while not self.stopped() and retry_count != config['max_number_of_retries']:
            data = self.fetch_data()
            if data is None:
                retry_count += 1
            else:
                parsed_data = self.parse_data(data)
                self.display_data(parsed_data)
                time.sleep(config['refresh_period'])

    def fetch_data(self):
        stocks_string = ','.join(self._stocks)
        try:
            return urllib2.urlopen(base_url.format(stocks_string)).read().strip()
        except:
            return None

    def parse_data(self, data):
        parsed_data = []
        split_data = data.split('\n')
        for stock, price_percentage in zip(self._stocks, split_data):
            split_price_percentage = price_percentage.split(',')
            price = split_price_percentage[0]
            percentage = split_price_percentage[1].replace('"', '').strip()
            parsed_data.append((stock, price, percentage))
        return parsed_data

    def display_data(self, stock_data):
        self._std_screen.move(0, 0)
        self._std_screen.clear()
        width = self._std_screen.getmaxyx()[1]
        for stock in stock_data:
            y_pos, x_pos = self._std_screen.getyx()
            color = 1 if '+' in stock[2] else 2 if '-' in stock[2] else 0
            if x_pos + len(stock[0]) + len(stock[1]) + len(stock[2]) + 7 > width:
                self._std_screen.move(y_pos + 1, 0)
            self._std_screen.addstr(' ' + stock[0].upper())
            self._std_screen.addstr(' {0} ({1})'.format(stock[1], stock[2]),
                                    curses.color_pair(color))
            self._std_screen.addstr(' |')
            self._std_screen.refresh()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()

if __name__ == '__main__':
    main()